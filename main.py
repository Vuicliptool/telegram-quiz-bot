import random
import re
import sqlite3
from datetime import datetime
import hashlib
import requests
import os
import time
import logging
import pathlib
from collections import Counter
import telebot
if os.name == 'nt':os.system('cls')
else:os.system('clear')
#API TOKEN BOT
API_TOKEN = '6737085704:AAFuXOG0aQ6xBldCJYfiqWOIquOcH8PNNek'
#NH√ìM B√ÅO L√ÄM NHI·ªÜM V·ª§
member = '@Tbruttele_bot'
#NH√ìM B√ÅO L·ªÜNH R√öT TI·ªÄN
money = '@Tbruttele_bot'

bot = telebot.TeleBot(API_TOKEN)
conn = sqlite3.connect('phone.db')
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        ID INTEGER PRIMARY KEY,
        phone_number TEXT, Tien INT
    )
''')
conn.commit()
conn.close()

def TimeStamp():
    now = datetime.now().strftime('%d-%m-%Y')
    return now
def xemtien(ID):
    conn = sqlite3.connect('phone.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
    tien = cursor.fetchone()
    return tien[2]
def themtien(ID, tien):
    conn = sqlite3.connect('phone.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
    tiencu = cursor.fetchone()
    tienmoi = tiencu[2] + tien
    cursor.execute("UPDATE users SET tien = ? WHERE ID = ?", (tienmoi, ID))
    conn.commit()
    conn.close()
    return tienmoi

def trutien(ID, tien):
    conn = sqlite3.connect('phone.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
    tiencu = cursor.fetchone()
    tienmoi = tiencu[2] - tien
    cursor.execute("UPDATE users SET tien = ? WHERE ID = ?", (tienmoi, ID))
    conn.commit()
    conn.close()
    return tienmoi

def checkphone(ID):
    conn = sqlite3.connect('phone.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
    phone = cursor.fetchone()
    return phone[1]

def testtien(ID, tien):
    db = sqlite3.connect('phone.db')
    cursor = db.cursor()
    cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
    tiencu = cursor.fetchone()
    new_coin = tiencu[2] - tien
    if new_coin < 0:
        return False
    else:
        return True
#menu button
start = telebot.types.ReplyKeyboardMarkup(True).add("üí≥ T√ÄI KHO·∫¢N","üíµ KI·∫æM TI·ªÄN").add("üí≤R√öT TI·ªÄN","üì©TH·ªÇ L·ªÜ").add("üèÜTOP V∆Ø·ª¢T LINK","üîëADMIN")
link = telebot.types.ReplyKeyboardMarkup(True).add("üïîL·ªäCH S·ª¨ L√ÄM NV").add("üí∞OCTOLINKZ", "üí∞LINK4M").add("üí∞DILINK","üí∞1SHORT").add("üè† HOME")

octolink = telebot.types.ReplyKeyboardMarkup(True).add("üîíNH·∫¨P KEY OCTOLINK").add("üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")
fvip = telebot.types.ReplyKeyboardMarkup(True).add("üîíNH·∫¨P KEY 1SHORT").add("üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")
lsu = telebot.types.ReplyKeyboardMarkup(True).add("üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")
link4m = telebot.types.ReplyKeyboardMarkup(True).add("üîíNH·∫¨P KEY LINK4M").add("üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")
dilink = telebot.types.ReplyKeyboardMarkup(True).add("üîíNH·∫¨P KEY DILINK").add("üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")
quaylai = telebot.types.ReplyKeyboardMarkup(True).add("üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")

rut = telebot.types.ReplyKeyboardMarkup(True).add("MOMO").add("üè† HOME")

ve = telebot.types.ReplyKeyboardMarkup(True).add("üí≤R√öT TI·ªÄN").add("üè† HOME")
quay = telebot.types.ReplyKeyboardMarkup(True).add("üîôQUAY L·∫†I")
tle = telebot.types.ReplyKeyboardMarkup(True).add("üîÉLOAD L·∫†I").add("üíµ KI·∫æM TI·ªÄN","üîëADMIN").add("üè† HOME")
tlee = telebot.types.ReplyKeyboardMarkup(True).add("üíµ KI·∫æM TI·ªÄN","üîëADMIN").add("üè† HOME")
gt = telebot.types.ReplyKeyboardMarkup(True).add("üíµ KI·∫æM TI·ªÄN","üí≤R√öT TI·ªÄN").add("üè† HOME")
nhaplai = telebot.types.ReplyKeyboardMarkup(True).add("NH·∫¨P L·∫†I SDT")
@bot.message_handler(func=lambda message: message.text == "NH·∫¨P L·∫†I SDT")
def handler_lai(message):
  ID = message.from_user.id
  conn = sqlite3.connect('phone.db')
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
  user = cursor.fetchone()
  if user is None:
    text = '''
VUI L√íNG NH·∫¨P L·∫†I S·ªê ƒêI·ªÜN THO·∫†I:
    '''
    bot.send_message(message.chat.id,text)
    bot.register_next_step_handler(message,sdt)
  else:
    text = '''
CH√ÄO M·ª™NG B·∫†N QUAY L·∫†I BOT CH√öC B·∫†N NG√ÄY M·ªöI VUI V·∫∫
'''
    bot.send_message(message.chat.id, text, reply_markup=start)
  conn.close()
def sdt(message):
  ID = message.chat.id
  phone_number = message.text.strip()
  phone_number = re.sub(r'\D', '', phone_number)
  if len(phone_number) != 10:
    bot.send_message(message.chat.id,text="S·ªê ƒêI·ªÜN THO·∫†I KH√îNG H·ª¢P L·ªÜ ! VUI L√íNG NH·∫¨P L·∫†I!", reply_markup=nhaplai)
    return
  conn = sqlite3.connect('phone.db')
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM users WHERE phone_number = ?", (phone_number,))
  user = cursor.fetchone()
  if user is None:
    cursor.execute("INSERT INTO users (ID, phone_number, tien) VALUES (?, ?, 0)", (ID, phone_number))
    conn.commit()
    text = '''
ƒêƒÇNG K√ç T√ÄI KHO·∫¢N TH√ÄNH C√îNG B·∫†N C√ì TH·ªÇ KI·∫æM TI·ªÄN!
'''
    bot.send_message(message.chat.id,text, reply_markup=start)
  else:
    text = '''
S·ªê ƒêI·ªÜN THO·∫†I ƒê√É ƒê∆Ø·ª¢C ƒêƒÇNG K√ù TR√äN H·ªÜ TH·ªêNG
'''
    bot.send_message(message.chat.id,text,reply_markup=nhaplai)
  conn.close()
#B·∫ÆT ƒê·∫¶U 
@bot.message_handler(commands=['start','help'])
def handler_start(message):
  ID = message.from_user.id
  conn = sqlite3.connect('phone.db')
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM users WHERE ID = ?", (ID,))
  user = cursor.fetchone()
  if user is None:
    text = '''
CH√ÄO M·ª™NG NG∆Ø·ªúI M·ªöI!
üì± VUI L√íNG NH·∫¨P S·ªê ƒêI·ªÜN THO·∫†I ƒê·ªÇ ƒêƒÇNG K√ù
‚ö†Ô∏è L∆ØU √ù: PH·∫¢I L√Ä S·ªê ƒêI·ªÜN THO·∫†I ƒêƒÇNG K√ù MOMO CH√çNH CH·ª¶ ƒê·ªÇ C√ì TH·ªÇ R√öT TI·ªÄN 

VUI L√íNG NH·∫¨P S·ªê ƒêI·ªÜN THO·∫†I:
    '''
    bot.send_message(message.chat.id,text)
    bot.register_next_step_handler(message,sdt)
  else:
    text = '''
CH√ÄO M·ª™NG B·∫†N QUAY L·∫†I BOT CH√öC B·∫†N NG√ÄY M·ªöI VUI V·∫∫
'''
    bot.send_message(message.chat.id, text, reply_markup=start)
  conn.close()
def sdt(message):
  ID = message.chat.id
  phone_number = message.text.strip()
  phone_number = re.sub(r'\D', '', phone_number)
  if len(phone_number) != 10:
    bot.send_message(message.chat.id,text="S·ªê ƒêI·ªÜN THO·∫†I KH√îNG H·ª¢P L·ªÜ ! VUI L√íNG NH·∫¨P L·∫†I!", reply_markup=nhaplai)
    return
  conn = sqlite3.connect('phone.db')
  cursor = conn.cursor()
  cursor.execute("SELECT * FROM users WHERE phone_number = ?", (phone_number,))
  user = cursor.fetchone()
  if user is None:
    cursor.execute("INSERT INTO users (ID, phone_number, tien) VALUES (?, ?, 0)", (ID, phone_number))
    conn.commit()
    text = '''
ƒêƒÇNG K√ç T√ÄI KHO·∫¢N TH√ÄNH C√îNG B·∫†N C√ì TH·ªÇ KI·∫æM TI·ªÄN!
'''
    bot.send_message(message.chat.id,text, reply_markup=start)
  else:
    text = '''
S·ªê ƒêI·ªÜN THO·∫†I ƒê√É ƒê∆Ø·ª¢C ƒêƒÇNG K√ù TR√äN H·ªÜ TH·ªêNG
'''
    bot.send_message(message.chat.id,text,reply_markup=nhaplai)
  conn.close()

#NHI·ªÜM V·ª§ OCTOLINK

@bot.message_handler(func=lambda message: message.text == "üí∞OCTOLINKZ")
def handler_nv(message):
  username = message.from_user.id
  with open('key.txt', 'a') as f:
    f.close()
  string = f'octolink-{username}+{TimeStamp()}'
  hash_object = hashlib.md5(string.encode())
  key = str(hash_object.hexdigest())
  print(key)
  f = open("key.txt","r")
  k = f.read()
  f.close()
  time = datetime.now().strftime("%H")
  if int(time) < 6:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if int(time) > 22:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if key in k:
    text = "B·∫†N ƒê√É L√ÄM NHI·ªÜM V·ª§ N√ÄY R·ªíI VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC"
    bot.send_message(message.chat.id, text, reply_markup=quaylai)
  else:
    url_key = requests.get(f'https://octolinkz.com/api?api=dbcf90ff8d4affed9cd8eb89895e9037c6d477cf&url=https://abcxyzok.blogspot.com/p/click-vao-o-ben-duoi-se-tu-ong-sao-chep.html?key={key}').json()['shortenedUrl']
    text = f'''
üíµ L·∫•y Nhi·ªám V·ª• Th√†nh C√¥ng
üí≤ V∆∞·ª£t Link V√† Nh·∫≠n 250ƒê
‚≠ê Link: {url_key}
     '''
    bot.send_message(message.chat.id, text, reply_markup=octolink)
@bot.message_handler(func=lambda message: message.text == "üîíNH·∫¨P KEY OCTOLINK")
def handler_nv(message):
  bot.send_message(message.chat.id, text="VUI L√íNG NH·∫¨P KEY:")
  bot.register_next_step_handler(message,nv1)
def nv1(message):
  try:
    key = message.text
    if key == "üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§":
      ID = message.from_user.id
      now = TimeStamp()
      with open("key.txt", "r") as file:
        lines = file.readlines()
      nvt = 0
      for line in lines:
        if f"{now}:{ID}" in line:
          nvt += 1
      text = f'''
H√îM NAY: {TimeStamp()}
B·∫†N ƒê√É L√ÄM: {nvt} NHI·ªÜM V·ª§
      '''
      text += '''
VUI L√íNG CH·ªåN üëá
      '''
      bot.send_message(message.chat.id, text, reply_markup=link)
    if key == "üîíNH·∫¨P KEY OCTOLINK":
      text = "VUI L√íNG KH√îNG SPAM N√öT NH·∫¨P KEY H√ÉY NH·∫§N L·∫¶N N·ªÆA ƒê·ªÇ NH·∫¨P"
      bot.send_message(message.chat.id, text)
    else:
      f = open("key.txt","r")
      k = f.read()
      f.close()
      username = message.from_user.id
      string = f'octolink-{username}+{TimeStamp()}'
      hash_object = hashlib.md5(string.encode())
      d_key = str(hash_object.hexdigest())
      if key in k:
        bot.send_message(message.chat.id, 'KEY ƒê√É ƒê∆Ø·ª¢C S·ª¨ D·ª§NG VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC')
      else:
        if key == d_key:
          ID = message.from_user.id
    #ƒë·∫∑t s·ªë ti·ªÅn	
          tien = int(300)
          tong = themtien(ID, tien)
          bot.send_message(message.chat.id, text = f'KEY ƒê√öNG +{tien} XU | S·ªê D∆Ø: {tong}',reply_markup=link)
          a = requests.get(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={member}&text=ID: {ID}, L√ÄM TH√ÄNH C√îNG NHI·ªÜM V·ª§ <OCTOLINK> NH·∫¨N {tien}ƒê').text
          now = TimeStamp()
          f = open("key.txt","a+")
          k = f.write(f"{now}:{ID}_octolink/{key}"+"\n")
          f.close()
        else:
          bot.send_message(message.chat.id, 'KEY KH√îNG ƒê√öNG VUI L√íNG G·ª¨I [NH·∫¨P KEY OCTOLINK] V√Ä TH·ª¨ L·∫†I')
  except:
    bot.send_message(message.chat.id, text = "KEY KH√îNG ƒê√öNG ƒê·ªäNH D·∫†NG VUI L√íNG G·ª¨I [NH·∫¨P KEY OCTOLINK] V√Ä TH·ª¨ L·∫†I", reply_markup=octolink)

#Nh·∫≠p LINK4M
@bot.message_handler(func=lambda message: message.text == "üí∞LINK4M")
def handler_nv(message):
  username = message.from_user.id
  with open('key.txt', 'a') as f:
    f.close()
  string = f'link4m-{username}+{TimeStamp()}'
  hash_object = hashlib.md5(string.encode())
  key = str(hash_object.hexdigest())
  print(key)
  f = open("key.txt","r")
  k = f.read()
  f.close()
  time = datetime.now().strftime("%H")
  if int(time) < 6:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if int(time) > 22:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if key in k:
    text = "B·∫†N ƒê√É L√ÄM NHI·ªÜM V·ª§ N√ÄY R·ªíI VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC"
    bot.send_message(message.chat.id, text, reply_markup=quaylai)
  else:
    url_key = requests.get(f'https://link4m.co/api-shorten/v2?api=64ac9e1b2995f32940090060&url=https://abcxyzok.blogspot.com/p/click-vao-o-ben-duoi-se-tu-ong-sao-chep.html?key={key}').json()['shortenedUrl']
    text = f'''
üíµ L·∫•y Nhi·ªám V·ª• Th√†nh C√¥ng
üí≤ V∆∞·ª£t Link V√† Nh·∫≠n 300D
‚≠ê Link: {url_key}
     '''
    bot.send_message(message.chat.id, text, reply_markup=link4m)
@bot.message_handler(func=lambda message: message.text == "üîíNH·∫¨P KEY LINK4M")
def handler_nv(message):
  bot.send_message(message.chat.id, text="VUI L√íNG NH·∫¨P KEY:")
  bot.register_next_step_handler(message,nv2)
def nv2(message):
  try:
    key = message.text
    if key == "üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§":
      ID = message.from_user.id
      now = TimeStamp()
      with open("key.txt", "r") as file:
        lines = file.readlines()
      nvt = 0
      for line in lines:
        if f"{now}:{ID}" in line:
          nvt += 1
      text = f'''
H√îM NAY: {TimeStamp()}
B·∫†N ƒê√É L√ÄM: {nvt} NHI·ªÜM V·ª§
      '''
      text += '''
VUI L√íNG CH·ªåN üëá
      '''
      bot.send_message(message.chat.id, text, reply_markup=link)
    if key == "üîíNH·∫¨P KEY LINK4M":
      text = "VUI L√íNG KH√îNG SPAM N√öT NH·∫¨P KEY H√ÉY NH·∫§N L·∫¶N N·ªÆA ƒê·ªÇ NH·∫¨P"
      bot.send_message(message.chat.id, text)
    else:
      f = open("key.txt","r")
      k = f.read()
      f.close()
      username = message.from_user.id
      string = f'link4m-{username}+{TimeStamp()}'
      hash_object = hashlib.md5(string.encode())
      d_key = str(hash_object.hexdigest())
      if key in k:
        bot.send_message(message.chat.id, 'KEY ƒê√É ƒê∆Ø·ª¢C S·ª¨ D·ª§NG VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC')
      else:
        if key == d_key:
          ID = message.from_user.id
    #ƒë·∫∑t s·ªë ti·ªÅn	
          tien = int(300)
          tong = themtien(ID, tien)
          bot.send_message(message.chat.id, text = f'KEY ƒê√öNG +{tien} XU | S·ªê D∆Ø: {tong}',reply_markup=link)
          a = requests.get(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={member}&text=ID: {ID}, L√ÄM TH√ÄNH C√îNG NHI·ªÜM V·ª§ <LINK4M> NH·∫¨N {tien}ƒê').text
          now = TimeStamp()
          f = open("key.txt","a+")
          k = f.write(f"{now}:{ID}_link4m/{key}"+"\n")
          f.close()
        else:
          bot.send_message(message.chat.id, 'KEY KH√îNG ƒê√öNG VUI L√íNG G·ª¨I [NH·∫¨P KEY LINK4M] V√Ä TH·ª¨ L·∫†I',reply_markup=link4m)
  except:
    bot.send_message(message.chat.id, text = "KEY KH√îNG ƒê√öNG ƒê·ªäNH D·∫†NG VUI L√íNG G·ª¨I [NH·∫¨P KEY LINK4M] V√Ä TH·ª¨ L·∫†I", reply_markup=link4m)
#DILINK
@bot.message_handler(func=lambda message: message.text == "üí∞DILINK")
def handler_nv(message):
  username = message.from_user.id
  with open('key.txt', 'a') as f:
    f.close()
  string = f'dilink-{username}+{TimeStamp()}'
  hash_object = hashlib.md5(string.encode())
  key = str(hash_object.hexdigest())
  print(key)
  f = open("key.txt","r")
  k = f.read()
  f.close()
  time = datetime.now().strftime("%H")
  if int(time) < 6:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if int(time) > 22:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if key in k:
    text = "B·∫†N ƒê√É L√ÄM NHI·ªÜM V·ª§ N√ÄY R·ªíI VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC"
    bot.send_message(message.chat.id, text, reply_markup=quaylai)
  else:
    link = f'https://dilink.net/QL_api.php?token=c5bd23bf304b304799286baf0430dc7dff69d7a6b61df592ab526321f9e3a438&url=https://abcxyzok.blogspot.com/p/click-vao-o-ben-duoi-se-tu-ong-sao-chep.html?key={key}'
    url_key = requests.get(f'https://tinyurl.com/api-create.php?url={link}').text
    text = f'''
üíµ L·∫•y Nhi·ªám V·ª• Th√†nh C√¥ng
üí≤ V∆∞·ª£t Link V√† Nh·∫≠n 300ƒê
‚≠ê Link: {url_key}
     '''
    bot.send_message(message.chat.id, text, reply_markup=dilink)
@bot.message_handler(func=lambda message: message.text == "üîíNH·∫¨P KEY DILINK")
def handler_nv(message):
  bot.send_message(message.chat.id, text="VUI L√íNG NH·∫¨P KEY:")
  bot.register_next_step_handler(message,nv3)
def nv3(message):
  try:
    key = message.text
    if key == "üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§":
      ID = message.from_user.id
      now = TimeStamp()
      with open("key.txt", "r") as file:
        lines = file.readlines()
      nvt = 0
      for line in lines:
        if f"{now}:{ID}" in line:
          nvt += 1
      text = f'''
H√îM NAY: {TimeStamp()}
B·∫†N ƒê√É L√ÄM: {nvt} NHI·ªÜM V·ª§
      '''
      text += '''
VUI L√íNG CH·ªåN üëá
      '''
      bot.send_message(message.chat.id, text, reply_markup=link)
    if key == "üîíNH·∫¨P KEY DILINK":
      text = "VUI L√íNG KH√îNG SPAM N√öT NH·∫¨P KEY H√ÉY NH·∫§N L·∫¶N N·ªÆA ƒê·ªÇ NH·∫¨P"
      bot.send_message(message.chat.id, text)
    else:
      f = open("key.txt","r")
      k = f.read()
      f.close()
      username = message.from_user.id
      string = f'dilink-{username}+{TimeStamp()}'
      hash_object = hashlib.md5(string.encode())
      d_key = str(hash_object.hexdigest())
      if key in k:
        bot.send_message(message.chat.id, 'KEY ƒê√É ƒê∆Ø·ª¢C S·ª¨ D·ª§NG VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC')
      else:
        if key == d_key:
          ID = message.from_user.id
    #ƒë·∫∑t s·ªë ti·ªÅn	
          tien = int(300)
          tong = themtien(ID, tien)
          bot.send_message(message.chat.id, text = f'KEY ƒê√öNG +{tien} XU | S·ªê D∆Ø: {tong}',reply_markup=link)
          a = requests.get(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={member}&text=ID: {ID}, L√ÄM TH√ÄNH C√îNG NHI·ªÜM V·ª§ <DILINK> NH·∫¨N {tien}ƒê').text
          now = TimeStamp()
          f = open("key.txt","a+")
          k = f.write(f"{now}:{ID}_dilink/{key}"+"\n")
          f.close()
        else:
          bot.send_message(message.chat.id, 'KEY KH√îNG ƒê√öNG VUI L√íNG G·ª¨I [NH·∫¨P KEY DILINK] V√Ä TH·ª¨ L·∫†I')
  except:
    bot.send_message(message.chat.id, text = "KEY KH√îNG ƒê√öNG ƒê·ªäNH D·∫†NG VUI L√íNG G·ª¨I [NH·∫¨P KEY DILINK] V√Ä TH·ª¨ L·∫†I", reply_markup=dilink)
#1SHORT
@bot.message_handler(func=lambda message: message.text == "üí∞1SHORT")
def handler_nv(message):
  username = message.from_user.id
  with open('key.txt', 'a') as f:
    f.close()
  string = f'1short-{username}+{TimeStamp()}'
  hash_object = hashlib.md5(string.encode())
  key = str(hash_object.hexdigest())
  print(key)
  f = open("key.txt","r")
  k = f.read()
  f.close()
  time = datetime.now().strftime("%H")
  if int(time) < 6:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if int(time) > 22:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if key in k:
    text = "B·∫†N ƒê√É L√ÄM NHI·ªÜM V·ª§ N√ÄY R·ªíI VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC"
    bot.send_message(message.chat.id, text, reply_markup=quaylai)
  else:
    url_key = requests.get(f'https://1shorten.com/api?api=232806f68d1fb76e55428daa60fb01dece9734b9&url=https://abcxyzok.blogspot.com/p/click-vao-o-ben-duoi-se-tu-ong-sao-chep.html?key={key}').json()['shortenedUrl']
    text = f'''
üíµ L·∫•y Nhi·ªám V·ª• Th√†nh C√¥ng
üí≤ V∆∞·ª£t Link V√† Nh·∫≠n 300ƒê
‚≠ê Link: {url_key}
     '''
    bot.send_message(message.chat.id, text, reply_markup=fvip)
@bot.message_handler(func=lambda message: message.text == "üîíNH·∫¨P KEY 1SHORT")
def handler_nv(message):
  bot.send_message(message.chat.id, text="VUI L√íNG NH·∫¨P KEY:")
  bot.register_next_step_handler(message,nv5)
def nv5(message):
  try:
    key = message.text
    if key == "üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§":
      ID = message.from_user.id
      now = TimeStamp()
      with open("key.txt", "r") as file:
        lines = file.readlines()
      nvt = 0
      for line in lines:
        if f"{now}:{ID}" in line:
          nvt += 1
      text = f'''
H√îM NAY: {TimeStamp()}
B·∫†N ƒê√É L√ÄM: {nvt} NHI·ªÜM V·ª§
      '''
      text += '''
VUI L√íNG CH·ªåN üëá
      '''
      bot.send_message(message.chat.id, text, reply_markup=link)
    if key == "üîíNH·∫¨P KEY 1SHORT":
      text = "VUI L√íNG KH√îNG SPAM N√öT NH·∫¨P KEY H√ÉY NH·∫§N L·∫¶N N·ªÆA ƒê·ªÇ NH·∫¨P"
      bot.send_message(message.chat.id, text)
    else:
      f = open("key.txt","r")
      k = f.read()
      f.close()
      username = message.from_user.id
      string = f'1short-{username}+{TimeStamp()}'
      hash_object = hashlib.md5(string.encode())
      d_key = str(hash_object.hexdigest())
      if key in k:
        bot.send_message(message.chat.id, 'KEY ƒê√É ƒê∆Ø·ª¢C S·ª¨ D·ª§NG VUI L√íNG L√ÄM NHI·ªÜM V·ª§ KH√ÅC')
      else:
        if key == d_key:
          ID = message.from_user.id
    #ƒë·∫∑t s·ªë ti·ªÅn	
          tien = int(300)
          tong = themtien(ID, tien)
          bot.send_message(message.chat.id, text = f'KEY ƒê√öNG +{tien} XU | S·ªê D∆Ø: {tong}',reply_markup=link)
          a = requests.get(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={member}&text=ID: {ID}, L√ÄM TH√ÄNH C√îNG NHI·ªÜM V·ª§ <1SHORT> NH·∫¨N {tien}ƒê').text
          now = TimeStamp()
          f = open("key.txt","a+")
          k = f.write(f"{now}:{ID}_1short/{key}"+"\n")
          f.close()
        else:
          bot.send_message(message.chat.id, 'KEY KH√îNG ƒê√öNG VUI L√íNG G·ª¨I [NH·∫¨P KEY 1SHORT] V√Ä TH·ª¨ L·∫†I')
  except:
    bot.send_message(message.chat.id, text = "KEY KH√îNG ƒê√öNG ƒê·ªäNH D·∫†NG VUI L√íNG G·ª¨I [NH·∫¨P KEY 1SHORT] V√Ä TH·ª¨ L·∫†I", reply_markup=fvip)
#WEB1S

@bot.message_handler(func=lambda message: message.text == "üïîL·ªäCH S·ª¨ L√ÄM NV")
def handler_lsu(message):
  ID = message.from_user.id
  now = TimeStamp()
  with open("key.txt", "r") as file:
    lines = file.readlines()
  link = 0
  nvt = 0
  l = 0
  l1 = 0
  l2 = 0 
  l3 = 0 
  l4 = 0 
  l5 = 0
  l6 = 0
  l7 = 0
  for line in lines:
    if f"{ID}" in line:
        link += 1
  for line in lines:
    if f"{ID}_octolink/" in line:
        l += 1
  for line in lines:
    if f"{ID}_dilink/" in line:
        l1 += 1
  for line in lines:
    if f"{ID}_link4m/" in line:
        l2 += 1
  for line in lines:
    if f"{ID}_1short/" in line:
        l3 += 1
  for line in lines:
    if f"{now}:{ID}" in line:
        nvt += 1
  text = f'''
H√îM NAY: {TimeStamp()}
-T·ªîNG NHI·ªÜM V·ª§ H√îM NAY ƒê√É L√ÄM: {nvt} LINK
-T·ªîNG T·∫§T C·∫¢ NHI·ªÜM V·ª§ ƒê√É L√ÄM TH·ªúI GIAN QUA: {link} LINK

_NV OCTOLINK: ƒê√É L√ÄM ƒê∆Ø·ª¢C {l} LINK

_NV DILINK: ƒê√É L√ÄM ƒê∆Ø·ª¢C {l1} LINK

_NV LINK4M: ƒê√É L√ÄM ƒê∆Ø·ª¢C {l2} LINK

_NV 1SHORT: ƒê√É L√ÄM ƒê∆Ø·ª¢C {l3} LINK
'''
  bot.send_message(message.chat.id, text, reply_markup=lsu)

@bot.message_handler(func=lambda message: message.text == "üè† HOME")
def handler_ql(message):
  text = "VUI L√íNG CH·ªåN üëá"
  bot.send_message(message.chat.id, text, reply_markup=start)
@bot.message_handler(func=lambda message:
   message.text == "üì©TH·ªÇ L·ªÜ")
def handler_tle(message):
  text = "üíµ BOT KI·∫æM TI·ªÄN TELEGRAM UY T√çN H√ÄNG ƒê·∫¶U VI·ªÜT NAM | üì© BOT AUTO T·ª∞ ƒê·ªòNG 100% | üîë ADMIN H·ªñ TR·ª¢ 24/7 | M·ªåI NG∆Ø·ªúI VUI L√íNG KH√îNG GIAN L·∫¨N HO·∫∂C BUG LINK TRONG KHI L√ÄM NHI·ªÜM V·ª§ N·∫æU B·ªä PH√ÅT HI·ªÜN BAND TR·ª∞C TI·∫æP ! C·∫¢M ∆†N üíµ"
  bot.send_message(message.chat.id, text, reply_markup=tlee)
@bot.message_handler(func=lambda message:
   message.text == "üîëADMIN")
def handler_tle(message):
  text = "G·∫∂P L·ªñI HAY V·∫§N ƒê·ªÄ G√å ƒê√ì LH :https://t.me/cong131206"
  bot.send_message(message.chat.id, text, reply_markup=start)
@bot.message_handler(func=lambda message: message.text == "üîôTR·ªû V·ªÄ NHI·ªÜM V·ª§")
def handler_ql(message):
  ID = message.from_user.id
  now = TimeStamp()
  with open("key.txt", "r") as file:
    lines = file.readlines()
  nvt = 0
  for line in lines:
    if f"{now}:{ID}" in line:
      nvt += 1
  text = f'''
H√îM NAY: {TimeStamp()}
B·∫†N ƒê√É L√ÄM: {nvt} NHI·ªÜM V·ª§
  '''
  text += '''
VUI L√íNG CH·ªåN üëá
  '''
  bot.send_message(message.chat.id, text, reply_markup=link)
@bot.message_handler(func=lambda message: message.text == "üíµ KI·∫æM TI·ªÄN")
def handler_ktien(message):
  ID = message.from_user.id
  time = datetime.now().strftime("%H")
  if int(time) < 6:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  if int(time) > 22:
    text = "NHI·ªÜM V·ª§ M·ªû T·ª™ 6H ƒê·∫æN 22H"
    bot.send_message(message.chat.id, text, reply_markup=start)
    return
  now = TimeStamp()
  with open('key.txt', 'a') as file:
    file.close()
  with open("key.txt", "r") as file:
    lines = file.readlines()
  nvt = 0
  for line in lines:
    if f"{now}:{ID}" in line:
        nvt += 1
  text = f'''
H√îM NAY: {TimeStamp()}
B·∫†N ƒê√É L√ÄM: {nvt} NHI·ªÜM V·ª§
'''
  text += '''
VUI L√íNG CH·ªåN üëá
   '''

  bot.send_message(message.chat.id, text, reply_markup=link)
@bot.message_handler(func=lambda message: message.text == "üí≤R√öT TI·ªÄN")
def handler_rut(message):
  text = "VUI L√íNG CH·ªåN PH∆Ø∆†NG TH·ª®C R√öT"
  bot.send_message(message.chat.id, text, reply_markup=rut)
@bot.message_handler(func=lambda message: message.text == "üîôQUAY L·∫†I")
def handler_rut(message):
  text = "VUI L√íNG CH·ªåN PH∆Ø∆†NG TH·ª®C R√öT"
  bot.send_message(message.chat.id, text, reply_markup=rut)
############
@bot.message_handler(func=lambda message: message.text == "üèÜTOP V∆Ø·ª¢T LINK")
def handler_tle(message):
  text = "ƒê√ÇY L√Ä TOP V∆Ø·ª¢T LINK üèÜ"
  bot.send_message(message.chat.id, text, reply_markup=tle)
  with open("key.txt", "r") as file:
    lines = file.readlines()
  name_counts = {}
  pattern = r"(?<=:)([^:_]+)"
  for line in lines:
    matches = re.findall(pattern, line)
    for name in matches:
        name = name.strip()
        if name not in name_counts:
            name_counts[name] = 1
        else:
            name_counts[name] += 1
  sorted_names = sorted(name_counts.items(), key=lambda x: x[1], reverse=True)

  for i in range(min(10, len(sorted_names))):
    text = f"üèÜTOP{i+1} <> ID: {sorted_names[i][0]} - V∆Ø·ª¢T ({sorted_names[i][1]} LINK)"
    bot.send_message(message.chat.id, text, reply_markup=tle)
@bot.message_handler(func=lambda message: message.text == "üîÉLOAD L·∫†I")
def handler_load(message):
  text = "ƒê√ÇY L√Ä TOP V∆Ø·ª¢T LINK üèÜ"
  bot.send_message(message.chat.id, text, reply_markup=tle)
  with open("key.txt", "r") as file:
    lines = file.readlines()
  name_counts = {}
  pattern = r"(?<=:)([^:_]+)"
  for line in lines:
    matches = re.findall(pattern, line)
    for name in matches:
        name = name.strip()
        if name not in name_counts:
            name_counts[name] = 1
        else:
            name_counts[name] += 1
  sorted_names = sorted(name_counts.items(), key=lambda x: x[1], reverse=True)

  for i in range(min(10, len(sorted_names))):
    text = f"üèÜTOP{i+1} <> ID: {sorted_names[i][0]} - V∆Ø·ª¢T ({sorted_names[i][1]} LINK)"
    bot.send_message(message.chat.id, text, reply_markup=tle)

@bot.message_handler(func=lambda message: message.text == "üí≥ T√ÄI KHO·∫¢N")
def handler_tkhoan(message):
   ID = message.from_user.id
   tien = xemtien(ID)
   phone = checkphone(ID)
   text = f'''
- ID ACC: {ID}
- S·ªê D∆Ø: {tien}ƒê
- SƒêT: {phone}
   '''
   bot.send_message(message.chat.id, text, reply_markup=ve)
@bot.message_handler(func=lambda message: message.text == "MOMO")
def handler_rut(message):
  ID = message.from_user.id
  phone = checkphone(ID)
  text = f'''
üëâMIN R√öT 5000ƒêüëà

- TH√îNG TIN T√ÄI KHO·∫¢N
- SƒêT MOMO: {phone}
_____________________________________
_ H√ÉY NH·∫¨P S·ªê TI·ªÄN V√Ä T√äN MOMO
*M·∫´u: 5000 Gi√°p VƒÉn C√¥ng
  '''
  bot.send_message(message.chat.id, text, reply_markup=quay)
  bot.register_next_step_handler(message,stien)
def stien(message):
  ID = message.from_user.id
  phone = checkphone(ID)
  ss = message.text
  s = message.text.split()
  if ss == "üîôQUAY L·∫†I":
    bot.send_message(message.chat.id, text="NH·∫¨P PH∆Ø∆†NG TH·ª®C R√öT TI·ªÄN",reply_markup=rut)
  else:
    try:
      stien = int(s[0])
      if testtien(ID, stien) == False:
        bot.send_message(message.chat.id, text="S·ªê D∆Ø KH√îNG ƒê·ª¶ H√ÉY L√ÄM TH√äM NHI·ªÜM V·ª§",reply_markup=rut)
      else:
        if float(stien) < 1000:
          bot.send_message(message.chat.id, text="MIN T·ªêI THI·ªÇU 1000",reply_markup=rut)
        else:
          tong = trutien(ID, stien)
          text = f'''
---T·∫†O PHI·∫æU R√öT TH√ÄNH C√îNG ---
‚àÜ L·ªÜNH:[{phone} {ss}]
_S·ªê D∆Ø C√íN: {tong}
          '''
          print(text)
          a = requests.get(f'https://api.telegram.org/bot{API_TOKEN}/sendMessage?chat_id={money}&text={ID}:[{phone} {ss}]').text
          bot.send_message(message.chat.id, text, reply_markup=rut)
    except:
      bot.send_message(message.chat.id, text="NH·∫¨P S·ªê TI·ªÄN CH·ªà (NH·∫¨P S·ªê) CH·ªåN MOMO L·∫†I ƒê·ªÇ R√öT",reply_markup=rut)
while True:
  try:
    bot.polling(none_stop=True)
  except Exception as e:
        time.sleep(5)
